//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_ConfForLuaWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.ConfForLua), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("BindConf", BindConf);
		L.RegFunction("AddDoubleValue", AddDoubleValue);
		L.RegFunction("ChangeValue", ChangeValue);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("m_varlist", get_m_varlist, set_m_varlist);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindConf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			LuaFramework.ConfForLua o = LuaFramework.ConfForLua.BindConf(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDoubleValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaFramework.ConfForLua obj = (LuaFramework.ConfForLua)ToLua.CheckObject(L, 1, typeof(LuaFramework.ConfForLua));
			string arg0 = ToLua.CheckString(L, 2);
			double arg1 = (double)LuaDLL.luaL_checknumber(L, 3);
			obj.AddDoubleValue(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaFramework.ConfForLua obj = (LuaFramework.ConfForLua)ToLua.CheckObject(L, 1, typeof(LuaFramework.ConfForLua));
			string arg0 = ToLua.CheckString(L, 2);
			double arg1 = (double)LuaDLL.luaL_checknumber(L, 3);
			obj.ChangeValue(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_varlist(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ConfForLua obj = (LuaFramework.ConfForLua)o;
			System.Collections.Generic.Dictionary<string,double> ret = obj.m_varlist;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_varlist on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_varlist(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ConfForLua obj = (LuaFramework.ConfForLua)o;
			System.Collections.Generic.Dictionary<string,double> arg0 = (System.Collections.Generic.Dictionary<string,double>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,double>));
			obj.m_varlist = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_varlist on a nil value" : e.Message);
		}
	}
}

