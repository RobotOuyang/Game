//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class pomeloBehaviourWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(pomeloBehaviour), typeof(Manager));
		L.RegFunction("CloseClient", CloseClient);
		L.RegFunction("GetHandShakeCache", GetHandShakeCache);
		L.RegFunction("ConnectToGate", ConnectToGate);
		L.RegFunction("OnGateServerDisconnect", OnGateServerDisconnect);
		L.RegFunction("OnConnectToGate", OnConnectToGate);
		L.RegFunction("OnConnectToConnector", OnConnectToConnector);
		L.RegFunction("OnServerDisconnect", OnServerDisconnect);
		L.RegFunction("ConnectServer", ConnectServer);
		L.RegFunction("CallMethod", CallMethod);
		L.RegFunction("SendRequest", SendRequest);
		L.RegFunction("Notify", Notify);
		L.RegFunction("On", On);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("pc", get_pc, set_pc);
		L.RegVar("HandShakeCache", get_HandShakeCache, set_HandShakeCache);
		L.RegVar("uid", get_uid, set_uid);
		L.RegVar("closeEvent", get_closeEvent, set_closeEvent);
		L.RegVar("updateClientEvent", get_updateClientEvent, set_updateClientEvent);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseClient(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			pomeloBehaviour obj = (pomeloBehaviour)ToLua.CheckObject(L, 1, typeof(pomeloBehaviour));
			obj.CloseClient();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHandShakeCache(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			pomeloBehaviour obj = (pomeloBehaviour)ToLua.CheckObject(L, 1, typeof(pomeloBehaviour));
			string o = obj.GetHandShakeCache();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConnectToGate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			pomeloBehaviour obj = (pomeloBehaviour)ToLua.CheckObject(L, 1, typeof(pomeloBehaviour));
			obj.ConnectToGate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnGateServerDisconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			pomeloBehaviour obj = (pomeloBehaviour)ToLua.CheckObject(L, 1, typeof(pomeloBehaviour));
			obj.OnGateServerDisconnect();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnConnectToGate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			pomeloBehaviour obj = (pomeloBehaviour)ToLua.CheckObject(L, 1, typeof(pomeloBehaviour));
			obj.OnConnectToGate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnConnectToConnector(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			pomeloBehaviour obj = (pomeloBehaviour)ToLua.CheckObject(L, 1, typeof(pomeloBehaviour));
			obj.OnConnectToConnector();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnServerDisconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			pomeloBehaviour obj = (pomeloBehaviour)ToLua.CheckObject(L, 1, typeof(pomeloBehaviour));
			obj.OnServerDisconnect();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConnectServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 9);
			pomeloBehaviour obj = (pomeloBehaviour)ToLua.CheckObject(L, 1, typeof(pomeloBehaviour));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			Pomelo.DotNetClient.ServerType arg2 = (Pomelo.DotNetClient.ServerType)ToLua.CheckObject(L, 4, typeof(Pomelo.DotNetClient.ServerType));
			Pomelo.DotNetClient.ClientProtocolType arg3 = (Pomelo.DotNetClient.ClientProtocolType)ToLua.CheckObject(L, 5, typeof(Pomelo.DotNetClient.ClientProtocolType));
			string arg4 = ToLua.CheckString(L, 6);
			byte[] arg5 = ToLua.CheckByteBuffer(L, 7);
			string arg6 = ToLua.CheckString(L, 8);
			string arg7 = ToLua.CheckString(L, 9);
			bool o = obj.ConnectServer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallMethod(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			string arg0 = ToLua.CheckString(L, 1);
			object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
			object[] o = pomeloBehaviour.CallMethod(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendRequest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			pomeloBehaviour obj = (pomeloBehaviour)ToLua.CheckObject(L, 1, typeof(pomeloBehaviour));
			string arg0 = ToLua.CheckString(L, 2);
			LitJson.JsonData arg1 = (LitJson.JsonData)ToLua.CheckObject(L, 3, typeof(LitJson.JsonData));
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
			obj.SendRequest(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Notify(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			pomeloBehaviour obj = (pomeloBehaviour)ToLua.CheckObject(L, 1, typeof(pomeloBehaviour));
			string arg0 = ToLua.CheckString(L, 2);
			LitJson.JsonData arg1 = (LitJson.JsonData)ToLua.CheckObject(L, 3, typeof(LitJson.JsonData));
			obj.Notify(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int On(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			pomeloBehaviour obj = (pomeloBehaviour)ToLua.CheckObject(L, 1, typeof(pomeloBehaviour));
			string arg0 = ToLua.CheckString(L, 2);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
			obj.On(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			pomeloBehaviour obj = (pomeloBehaviour)o;
			Pomelo.DotNetClient.PomeloClient ret = obj.pc;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pc on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HandShakeCache(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			pomeloBehaviour obj = (pomeloBehaviour)o;
			string ret = obj.HandShakeCache;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HandShakeCache on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			pomeloBehaviour obj = (pomeloBehaviour)o;
			string ret = obj.uid;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index uid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_closeEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject("pomeloBehaviour.closeEvent"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_updateClientEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject("pomeloBehaviour.updateClientEvent"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			pomeloBehaviour obj = (pomeloBehaviour)o;
			Pomelo.DotNetClient.PomeloClient arg0 = (Pomelo.DotNetClient.PomeloClient)ToLua.CheckObject(L, 2, typeof(Pomelo.DotNetClient.PomeloClient));
			obj.pc = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pc on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HandShakeCache(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			pomeloBehaviour obj = (pomeloBehaviour)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.HandShakeCache = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HandShakeCache on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_uid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			pomeloBehaviour obj = (pomeloBehaviour)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.uid = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index uid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_closeEvent(IntPtr L)
	{
		try
		{
			pomeloBehaviour obj = (pomeloBehaviour)ToLua.CheckObject(L, 1, typeof(pomeloBehaviour));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'pomeloBehaviour.closeEvent' can only appear on the left hand side of += or -= when used outside of the type 'pomeloBehaviour'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)DelegateFactory.CreateDelegate(typeof(System.Action), arg0.func);
				obj.closeEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)LuaMisc.GetEventHandler(obj, typeof(pomeloBehaviour), "closeEvent");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.closeEvent -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_updateClientEvent(IntPtr L)
	{
		try
		{
			pomeloBehaviour obj = (pomeloBehaviour)ToLua.CheckObject(L, 1, typeof(pomeloBehaviour));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'pomeloBehaviour.updateClientEvent' can only appear on the left hand side of += or -= when used outside of the type 'pomeloBehaviour'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action ev = (System.Action)DelegateFactory.CreateDelegate(typeof(System.Action), arg0.func);
				obj.updateClientEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action ev = (System.Action)LuaMisc.GetEventHandler(obj, typeof(pomeloBehaviour), "updateClientEvent");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.updateClientEvent -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

