//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LitJson_JsonMapperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LitJson.JsonMapper), typeof(System.Object));
		L.RegFunction("ToJson", ToJson);
		L.RegFunction("ToObject", ToObject);
		L.RegFunction("ToWrapper", ToWrapper);
		L.RegFunction("UnregisterExporters", UnregisterExporters);
		L.RegFunction("UnregisterImporters", UnregisterImporters);
		L.RegFunction("New", _CreateLitJson_JsonMapper);
		L.RegFunction("__tostring", Lua_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLitJson_JsonMapper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LitJson.JsonMapper obj = new LitJson.JsonMapper();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LitJson.JsonMapper.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToJson(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(object)))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				string o = LitJson.JsonMapper.ToJson(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(object), typeof(LitJson.JsonWriter)))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				LitJson.JsonWriter arg1 = (LitJson.JsonWriter)ToLua.ToObject(L, 2);
				LitJson.JsonMapper.ToJson(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LitJson.JsonMapper.ToJson");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				LitJson.JsonData o = LitJson.JsonMapper.ToObject(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(System.IO.TextReader)))
			{
				System.IO.TextReader arg0 = (System.IO.TextReader)ToLua.ToObject(L, 1);
				LitJson.JsonData o = LitJson.JsonMapper.ToObject(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(LitJson.JsonReader)))
			{
				LitJson.JsonReader arg0 = (LitJson.JsonReader)ToLua.ToObject(L, 1);
				LitJson.JsonData o = LitJson.JsonMapper.ToObject(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LitJson.JsonMapper.ToObject");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToWrapper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LitJson.WrapperFactory), typeof(string)))
			{
				LitJson.WrapperFactory arg0 = null;
				LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

				if (funcType1 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (LitJson.WrapperFactory)ToLua.ToObject(L, 1);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 1);
					arg0 = DelegateFactory.CreateDelegate(typeof(LitJson.WrapperFactory), func) as LitJson.WrapperFactory;
				}

				string arg1 = ToLua.ToString(L, 2);
				LitJson.IJsonWrapper o = LitJson.JsonMapper.ToWrapper(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LitJson.WrapperFactory), typeof(LitJson.JsonReader)))
			{
				LitJson.WrapperFactory arg0 = null;
				LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

				if (funcType1 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (LitJson.WrapperFactory)ToLua.ToObject(L, 1);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 1);
					arg0 = DelegateFactory.CreateDelegate(typeof(LitJson.WrapperFactory), func) as LitJson.WrapperFactory;
				}

				LitJson.JsonReader arg1 = (LitJson.JsonReader)ToLua.ToObject(L, 2);
				LitJson.IJsonWrapper o = LitJson.JsonMapper.ToWrapper(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LitJson.JsonMapper.ToWrapper");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnregisterExporters(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			LitJson.JsonMapper.UnregisterExporters();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnregisterImporters(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			LitJson.JsonMapper.UnregisterImporters();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}
}

