//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameChooseRotationWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameChooseRotation), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SetIndex", SetIndex);
		L.RegFunction("SetChildCount", SetChildCount);
		L.RegFunction("GetSingleAngle", GetSingleAngle);
		L.RegFunction("SetAngle", SetAngle);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("angle", get_angle, set_angle);
		L.RegVar("obj", get_obj, set_obj);
		L.RegVar("child_count", get_child_count, set_child_count);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameChooseRotation obj = (GameChooseRotation)ToLua.CheckObject(L, 1, typeof(GameChooseRotation));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetIndex(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetChildCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameChooseRotation obj = (GameChooseRotation)ToLua.CheckObject(L, 1, typeof(GameChooseRotation));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetChildCount(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSingleAngle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameChooseRotation obj = (GameChooseRotation)ToLua.CheckObject(L, 1, typeof(GameChooseRotation));
			float o = obj.GetSingleAngle();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAngle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameChooseRotation obj = (GameChooseRotation)ToLua.CheckObject(L, 1, typeof(GameChooseRotation));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetAngle(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_angle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameChooseRotation obj = (GameChooseRotation)o;
			float ret = obj.angle;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index angle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_obj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameChooseRotation obj = (GameChooseRotation)o;
			UnityEngine.GameObject ret = obj.obj;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index obj on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_child_count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameChooseRotation obj = (GameChooseRotation)o;
			int ret = obj.child_count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index child_count on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_angle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameChooseRotation obj = (GameChooseRotation)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.angle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index angle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_obj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameChooseRotation obj = (GameChooseRotation)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.obj = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index obj on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_child_count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameChooseRotation obj = (GameChooseRotation)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.child_count = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index child_count on a nil value" : e.Message);
		}
	}
}

