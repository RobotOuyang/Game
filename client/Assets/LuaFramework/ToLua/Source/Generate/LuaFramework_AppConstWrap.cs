//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_AppConstWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.AppConst), typeof(System.Object));
		L.RegFunction("New", _CreateLuaFramework_AppConst);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("DebugMode", get_DebugMode, set_DebugMode);
		L.RegConstant("luaDebugMode", 1);
		L.RegVar("UpdateMode", get_UpdateMode, set_UpdateMode);
		L.RegVar("EditorUpdate", get_EditorUpdate, set_EditorUpdate);
		L.RegVar("LuaByteMode", get_LuaByteMode, set_LuaByteMode);
		L.RegConstant("LuaBundleMode", 1);
		L.RegConstant("AtlasMode", 1);
		L.RegConstant("TimerInterval", 1);
		L.RegConstant("GameFrameRate", 30);
		L.RegVar("EidtorNotUseBundle", get_EidtorNotUseBundle, set_EidtorNotUseBundle);
		L.RegVar("PrefabPath", get_PrefabPath, null);
		L.RegVar("TexturePath", get_TexturePath, null);
		L.RegVar("ScenePath", get_ScenePath, null);
		L.RegVar("OtherResourcePath", get_OtherResourcePath, null);
		L.RegVar("TexPrefabPath", get_TexPrefabPath, null);
		L.RegVar("AudioPrefabPath", get_AudioPrefabPath, null);
		L.RegVar("SoundPath", get_SoundPath, null);
		L.RegVar("AppName", get_AppName, null);
		L.RegVar("LuaTempDir", get_LuaTempDir, null);
		L.RegVar("AppPrefix", get_AppPrefix, null);
		L.RegVar("ExtName", get_ExtName, null);
		L.RegVar("AssetDir", get_AssetDir, null);
		L.RegVar("AssetDir_win", get_AssetDir_win, null);
		L.RegVar("AssetDir_andorid", get_AssetDir_andorid, null);
		L.RegVar("AssetDir_ios", get_AssetDir_ios, null);
		L.RegVar("Server_info_url", get_Server_info_url, set_Server_info_url);
		L.RegVar("UserId", get_UserId, set_UserId);
		L.RegVar("SocketPort", get_SocketPort, set_SocketPort);
		L.RegVar("SocketAddress", get_SocketAddress, set_SocketAddress);
		L.RegVar("GatePort", get_GatePort, set_GatePort);
		L.RegVar("AccountServer", get_AccountServer, set_AccountServer);
		L.RegVar("AvatarServer", get_AvatarServer, set_AvatarServer);
		L.RegVar("PatchServer", get_PatchServer, set_PatchServer);
		L.RegVar("PatchPath", get_PatchPath, set_PatchPath);
		L.RegVar("PatchIgnorePaths", get_PatchIgnorePaths, set_PatchIgnorePaths);
		L.RegVar("PlatformName", get_PlatformName, set_PlatformName);
		L.RegVar("Access_info", get_Access_info, set_Access_info);
		L.RegVar("Channel", get_Channel, set_Channel);
		L.RegVar("FrameworkRoot", get_FrameworkRoot, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaFramework_AppConst(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaFramework.AppConst obj = new LuaFramework.AppConst();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaFramework.AppConst.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DebugMode(IntPtr L)
	{
		LuaDLL.lua_pushboolean(L, LuaFramework.AppConst.DebugMode);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdateMode(IntPtr L)
	{
		LuaDLL.lua_pushboolean(L, LuaFramework.AppConst.UpdateMode);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EditorUpdate(IntPtr L)
	{
		LuaDLL.lua_pushboolean(L, LuaFramework.AppConst.EditorUpdate);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LuaByteMode(IntPtr L)
	{
		LuaDLL.lua_pushboolean(L, LuaFramework.AppConst.LuaByteMode);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EidtorNotUseBundle(IntPtr L)
	{
		LuaDLL.lua_pushboolean(L, LuaFramework.AppConst.EidtorNotUseBundle);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PrefabPath(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.PrefabPath);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TexturePath(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.TexturePath);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ScenePath(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.ScenePath);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OtherResourcePath(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.OtherResourcePath);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TexPrefabPath(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.TexPrefabPath);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AudioPrefabPath(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.AudioPrefabPath);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SoundPath(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.SoundPath);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AppName(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.AppName);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LuaTempDir(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.LuaTempDir);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AppPrefix(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.AppPrefix);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExtName(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.ExtName);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetDir(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.AssetDir);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetDir_win(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.AssetDir_win);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetDir_andorid(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.AssetDir_andorid);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetDir_ios(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.AssetDir_ios);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Server_info_url(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.Server_info_url);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UserId(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.UserId);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SocketPort(IntPtr L)
	{
		LuaDLL.lua_pushinteger(L, LuaFramework.AppConst.SocketPort);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SocketAddress(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.SocketAddress);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GatePort(IntPtr L)
	{
		LuaDLL.lua_pushinteger(L, LuaFramework.AppConst.GatePort);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AccountServer(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.AccountServer);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AvatarServer(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.AvatarServer);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PatchServer(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.PatchServer);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PatchPath(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.PatchPath);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PatchIgnorePaths(IntPtr L)
	{
		ToLua.Push(L, LuaFramework.AppConst.PatchIgnorePaths);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PlatformName(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.PlatformName);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Access_info(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.Access_info);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Channel(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.Channel);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FrameworkRoot(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LuaFramework.AppConst.FrameworkRoot);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DebugMode(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LuaFramework.AppConst.DebugMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UpdateMode(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LuaFramework.AppConst.UpdateMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EditorUpdate(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LuaFramework.AppConst.EditorUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LuaByteMode(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LuaFramework.AppConst.LuaByteMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EidtorNotUseBundle(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LuaFramework.AppConst.EidtorNotUseBundle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Server_info_url(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.AppConst.Server_info_url = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UserId(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.AppConst.UserId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SocketPort(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			LuaFramework.AppConst.SocketPort = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SocketAddress(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.AppConst.SocketAddress = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GatePort(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			LuaFramework.AppConst.GatePort = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AccountServer(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.AppConst.AccountServer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AvatarServer(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.AppConst.AvatarServer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PatchServer(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.AppConst.PatchServer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PatchPath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.AppConst.PatchPath = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PatchIgnorePaths(IntPtr L)
	{
		try
		{
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			LuaFramework.AppConst.PatchIgnorePaths = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PlatformName(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.AppConst.PlatformName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Access_info(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.AppConst.Access_info = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Channel(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.AppConst.Channel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

